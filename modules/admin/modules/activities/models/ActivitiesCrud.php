<?php

namespace app\modules\admin\modules\activities\models;

use app\models\CategoryActivitiesBase;
use app\models\StylistsBase;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use app\models\Activities;

/**
 * ActivitiesCrud represents the model behind the search form of `app\models\Activities`.
 */
class ActivitiesCrud extends Activities
{
    /**
     * {@inheritdoc}
     */
    public $category_title;
    public $stylist_name;

    public function rules()
    {
        return [
            [['id', 'category_id', 'stylist_id'], 'integer'],
            [['title', 'description', 'stylist_name', 'category_title', 'createDate'], 'safe'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
   /* public function beforeValidate()
    {
        if ($this->createDate) {
            $date = \DateTime::createFromFormat('d.m.Y', $this->createDate);
            if ($date) {
                $this->createDate= $date;
            }
        }
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }*/
    public function beforeValidate()
    {

        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function search($params)
    {
        $query = Activities::find();
       // var_dump($query->all());exit;
        // add conditions that should always apply here
        $query->joinWith('category');
        $query->joinWith('stylist');
        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => [
                'pageSize' => 5
            ]
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            return $dataProvider;
        }
        // grid filtering conditions
        $query->andFilterWhere([
            'activities.'.'id' => $this->id,
            'category_id' => $this->category_id,
            'stylist_id' => $this->stylist_id,
            //'stylistLastName' =>$this->stylistLastName,
            'activities.'.'createDate' => $this->createDate,
        ])->orderBy('createDate DESC');
        //var_dump($query);exit;
        $query->andFilterWhere(['like', 'activities.'.'title', $this->title])
            ->andFilterWhere(['like', 'description', $this->description])
            ->andFilterWhere(['like', StylistsBase::tableName().'.last_name', $this->stylist_name])
            ->andFilterWhere(['like', CategoryActivitiesBase::tableName().'.title', $this->category_title]);

        return $dataProvider;
    }

}
